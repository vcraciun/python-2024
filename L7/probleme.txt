1. Se dau 312 serii numerice care reprezinta codul unor aplicatii binare.
   Aceste serii trebuie clusterizate (gasit numarul optim  de grupari din care fac parte) folosind KMeans (un algoritm de invatare ne-supervizata) si chat-GPT

Ce stim:
a) folosim KMeans
b) deoarece KMeans foloseste o distanta pentru a construi grupari in baza distantei, va trebui si noi sa utilizam o astfel de distanta.
   Distantele posibile ar fi: 
   - Euclidean
   - Cosinus
   - K-Shape
   - Soft-DTW (dynamic time warping)
   - DBA (DTW Barycenter Averaging)
c) pentru a calcula numarul optim de clustere se foloseste algoritmul "silhouette analysis" pentru a obtine cate o valoare pentru un numar de clustere intre 2 si 20. Valoarea cea mai mare este pentru numarul optim de clustere
d) deoarece seriile au lungimi diferite vom efectua normalizare + resampling (reducand la dimensiunea seriei celei mai mici) si in domeniul y (-1,+1)
e) numarul de clustere nu poate fi mai mare de 14 si nici mai mic 3, daca cumva obtinem o valoare mai buna pentru analiza siluetei >= 14, atunci luam cea mai mare valoare < 14
f) vom folosi toti algoritmii de distanta si vom alege numarul de clustere cel mai mic dintre toti
g) la final vom plota clusterele intr-o matrice specifica numarului gasit
   <=4 - 2x2
   <=6 - 3x2
   <=9 - 3x3
   <=12- 4x3
h) plotarea finala se face cu o culoare gri sau galben deschis pentru serii si cu rosu sau albastru inchis pentru centroid
g) incarcarea seriilor se face din fisierul "serii.json" care contine o lista de liste
h) atat graficul de la analiza siluetei pentru cele 5 distante cat si clusterele finale, vor fi scrise in fisiere .png
i) graficele trebuie sa aiba si grid (plt.grid())
j) folosind indexii seriilor din clusterele gasite, plotati in grafice separate seriile initiale care nu au fost normalizate/resampled


2. Implementati un game-of-life la consola pe rezolutia maxima a unui terminal.
   folositi codul din START-GAME.PY pentru afisare

